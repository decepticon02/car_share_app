
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model putnik
 * 
 */
export type putnik = $Result.DefaultSelection<Prisma.$putnikPayload>
/**
 * Model usr
 * 
 */
export type usr = $Result.DefaultSelection<Prisma.$usrPayload>
/**
 * Model voznja
 * 
 */
export type voznja = $Result.DefaultSelection<Prisma.$voznjaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Putniks
 * const putniks = await prisma.putnik.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Putniks
   * const putniks = await prisma.putnik.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.putnik`: Exposes CRUD operations for the **putnik** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Putniks
    * const putniks = await prisma.putnik.findMany()
    * ```
    */
  get putnik(): Prisma.putnikDelegate<ExtArgs>;

  /**
   * `prisma.usr`: Exposes CRUD operations for the **usr** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usrs
    * const usrs = await prisma.usr.findMany()
    * ```
    */
  get usr(): Prisma.usrDelegate<ExtArgs>;

  /**
   * `prisma.voznja`: Exposes CRUD operations for the **voznja** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Voznjas
    * const voznjas = await prisma.voznja.findMany()
    * ```
    */
  get voznja(): Prisma.voznjaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    putnik: 'putnik',
    usr: 'usr',
    voznja: 'voznja'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'putnik' | 'usr' | 'voznja'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      putnik: {
        payload: Prisma.$putnikPayload<ExtArgs>
        fields: Prisma.putnikFieldRefs
        operations: {
          findUnique: {
            args: Prisma.putnikFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.putnikFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>
          }
          findFirst: {
            args: Prisma.putnikFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.putnikFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>
          }
          findMany: {
            args: Prisma.putnikFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>[]
          }
          create: {
            args: Prisma.putnikCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>
          }
          createMany: {
            args: Prisma.putnikCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.putnikCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>[]
          }
          delete: {
            args: Prisma.putnikDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>
          }
          update: {
            args: Prisma.putnikUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>
          }
          deleteMany: {
            args: Prisma.putnikDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.putnikUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.putnikUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$putnikPayload>
          }
          aggregate: {
            args: Prisma.PutnikAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePutnik>
          }
          groupBy: {
            args: Prisma.putnikGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PutnikGroupByOutputType>[]
          }
          count: {
            args: Prisma.putnikCountArgs<ExtArgs>,
            result: $Utils.Optional<PutnikCountAggregateOutputType> | number
          }
        }
      }
      usr: {
        payload: Prisma.$usrPayload<ExtArgs>
        fields: Prisma.usrFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usrFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usrFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>
          }
          findFirst: {
            args: Prisma.usrFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usrFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>
          }
          findMany: {
            args: Prisma.usrFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>[]
          }
          create: {
            args: Prisma.usrCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>
          }
          createMany: {
            args: Prisma.usrCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usrCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>[]
          }
          delete: {
            args: Prisma.usrDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>
          }
          update: {
            args: Prisma.usrUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>
          }
          deleteMany: {
            args: Prisma.usrDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usrUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usrUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usrPayload>
          }
          aggregate: {
            args: Prisma.UsrAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsr>
          }
          groupBy: {
            args: Prisma.usrGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsrGroupByOutputType>[]
          }
          count: {
            args: Prisma.usrCountArgs<ExtArgs>,
            result: $Utils.Optional<UsrCountAggregateOutputType> | number
          }
        }
      }
      voznja: {
        payload: Prisma.$voznjaPayload<ExtArgs>
        fields: Prisma.voznjaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.voznjaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.voznjaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>
          }
          findFirst: {
            args: Prisma.voznjaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.voznjaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>
          }
          findMany: {
            args: Prisma.voznjaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>[]
          }
          create: {
            args: Prisma.voznjaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>
          }
          createMany: {
            args: Prisma.voznjaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.voznjaCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>[]
          }
          delete: {
            args: Prisma.voznjaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>
          }
          update: {
            args: Prisma.voznjaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>
          }
          deleteMany: {
            args: Prisma.voznjaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.voznjaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.voznjaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$voznjaPayload>
          }
          aggregate: {
            args: Prisma.VoznjaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVoznja>
          }
          groupBy: {
            args: Prisma.voznjaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VoznjaGroupByOutputType>[]
          }
          count: {
            args: Prisma.voznjaCountArgs<ExtArgs>,
            result: $Utils.Optional<VoznjaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsrCountOutputType
   */

  export type UsrCountOutputType = {
    voznje: number
  }

  export type UsrCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voznje?: boolean | UsrCountOutputTypeCountVoznjeArgs
  }

  // Custom InputTypes
  /**
   * UsrCountOutputType without action
   */
  export type UsrCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsrCountOutputType
     */
    select?: UsrCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsrCountOutputType without action
   */
  export type UsrCountOutputTypeCountVoznjeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: voznjaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model putnik
   */

  export type AggregatePutnik = {
    _count: PutnikCountAggregateOutputType | null
    _avg: PutnikAvgAggregateOutputType | null
    _sum: PutnikSumAggregateOutputType | null
    _min: PutnikMinAggregateOutputType | null
    _max: PutnikMaxAggregateOutputType | null
  }

  export type PutnikAvgAggregateOutputType = {
    id: number | null
  }

  export type PutnikSumAggregateOutputType = {
    id: number | null
  }

  export type PutnikMinAggregateOutputType = {
    id: number | null
    Email: string | null
    Password: string | null
    ime: string | null
    prezime: string | null
    broj_telefona: string | null
    prebivaliste: string | null
  }

  export type PutnikMaxAggregateOutputType = {
    id: number | null
    Email: string | null
    Password: string | null
    ime: string | null
    prezime: string | null
    broj_telefona: string | null
    prebivaliste: string | null
  }

  export type PutnikCountAggregateOutputType = {
    id: number
    Email: number
    Password: number
    ime: number
    prezime: number
    broj_telefona: number
    prebivaliste: number
    _all: number
  }


  export type PutnikAvgAggregateInputType = {
    id?: true
  }

  export type PutnikSumAggregateInputType = {
    id?: true
  }

  export type PutnikMinAggregateInputType = {
    id?: true
    Email?: true
    Password?: true
    ime?: true
    prezime?: true
    broj_telefona?: true
    prebivaliste?: true
  }

  export type PutnikMaxAggregateInputType = {
    id?: true
    Email?: true
    Password?: true
    ime?: true
    prezime?: true
    broj_telefona?: true
    prebivaliste?: true
  }

  export type PutnikCountAggregateInputType = {
    id?: true
    Email?: true
    Password?: true
    ime?: true
    prezime?: true
    broj_telefona?: true
    prebivaliste?: true
    _all?: true
  }

  export type PutnikAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which putnik to aggregate.
     */
    where?: putnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of putniks to fetch.
     */
    orderBy?: putnikOrderByWithRelationInput | putnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: putnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` putniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` putniks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned putniks
    **/
    _count?: true | PutnikCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PutnikAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PutnikSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PutnikMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PutnikMaxAggregateInputType
  }

  export type GetPutnikAggregateType<T extends PutnikAggregateArgs> = {
        [P in keyof T & keyof AggregatePutnik]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePutnik[P]>
      : GetScalarType<T[P], AggregatePutnik[P]>
  }




  export type putnikGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: putnikWhereInput
    orderBy?: putnikOrderByWithAggregationInput | putnikOrderByWithAggregationInput[]
    by: PutnikScalarFieldEnum[] | PutnikScalarFieldEnum
    having?: putnikScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PutnikCountAggregateInputType | true
    _avg?: PutnikAvgAggregateInputType
    _sum?: PutnikSumAggregateInputType
    _min?: PutnikMinAggregateInputType
    _max?: PutnikMaxAggregateInputType
  }

  export type PutnikGroupByOutputType = {
    id: number
    Email: string
    Password: string
    ime: string
    prezime: string
    broj_telefona: string
    prebivaliste: string
    _count: PutnikCountAggregateOutputType | null
    _avg: PutnikAvgAggregateOutputType | null
    _sum: PutnikSumAggregateOutputType | null
    _min: PutnikMinAggregateOutputType | null
    _max: PutnikMaxAggregateOutputType | null
  }

  type GetPutnikGroupByPayload<T extends putnikGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PutnikGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PutnikGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PutnikGroupByOutputType[P]>
            : GetScalarType<T[P], PutnikGroupByOutputType[P]>
        }
      >
    >


  export type putnikSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Email?: boolean
    Password?: boolean
    ime?: boolean
    prezime?: boolean
    broj_telefona?: boolean
    prebivaliste?: boolean
  }, ExtArgs["result"]["putnik"]>

  export type putnikSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Email?: boolean
    Password?: boolean
    ime?: boolean
    prezime?: boolean
    broj_telefona?: boolean
    prebivaliste?: boolean
  }, ExtArgs["result"]["putnik"]>

  export type putnikSelectScalar = {
    id?: boolean
    Email?: boolean
    Password?: boolean
    ime?: boolean
    prezime?: boolean
    broj_telefona?: boolean
    prebivaliste?: boolean
  }


  export type $putnikPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "putnik"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Email: string
      Password: string
      ime: string
      prezime: string
      broj_telefona: string
      prebivaliste: string
    }, ExtArgs["result"]["putnik"]>
    composites: {}
  }

  type putnikGetPayload<S extends boolean | null | undefined | putnikDefaultArgs> = $Result.GetResult<Prisma.$putnikPayload, S>

  type putnikCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<putnikFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PutnikCountAggregateInputType | true
    }

  export interface putnikDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['putnik'], meta: { name: 'putnik' } }
    /**
     * Find zero or one Putnik that matches the filter.
     * @param {putnikFindUniqueArgs} args - Arguments to find a Putnik
     * @example
     * // Get one Putnik
     * const putnik = await prisma.putnik.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends putnikFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, putnikFindUniqueArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Putnik that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {putnikFindUniqueOrThrowArgs} args - Arguments to find a Putnik
     * @example
     * // Get one Putnik
     * const putnik = await prisma.putnik.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends putnikFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, putnikFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Putnik that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {putnikFindFirstArgs} args - Arguments to find a Putnik
     * @example
     * // Get one Putnik
     * const putnik = await prisma.putnik.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends putnikFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, putnikFindFirstArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Putnik that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {putnikFindFirstOrThrowArgs} args - Arguments to find a Putnik
     * @example
     * // Get one Putnik
     * const putnik = await prisma.putnik.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends putnikFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, putnikFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Putniks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {putnikFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Putniks
     * const putniks = await prisma.putnik.findMany()
     * 
     * // Get first 10 Putniks
     * const putniks = await prisma.putnik.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const putnikWithIdOnly = await prisma.putnik.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends putnikFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, putnikFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Putnik.
     * @param {putnikCreateArgs} args - Arguments to create a Putnik.
     * @example
     * // Create one Putnik
     * const Putnik = await prisma.putnik.create({
     *   data: {
     *     // ... data to create a Putnik
     *   }
     * })
     * 
    **/
    create<T extends putnikCreateArgs<ExtArgs>>(
      args: SelectSubset<T, putnikCreateArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Putniks.
     * @param {putnikCreateManyArgs} args - Arguments to create many Putniks.
     * @example
     * // Create many Putniks
     * const putnik = await prisma.putnik.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends putnikCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, putnikCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Putniks and returns the data saved in the database.
     * @param {putnikCreateManyAndReturnArgs} args - Arguments to create many Putniks.
     * @example
     * // Create many Putniks
     * const putnik = await prisma.putnik.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Putniks and only return the `id`
     * const putnikWithIdOnly = await prisma.putnik.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends putnikCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, putnikCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Putnik.
     * @param {putnikDeleteArgs} args - Arguments to delete one Putnik.
     * @example
     * // Delete one Putnik
     * const Putnik = await prisma.putnik.delete({
     *   where: {
     *     // ... filter to delete one Putnik
     *   }
     * })
     * 
    **/
    delete<T extends putnikDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, putnikDeleteArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Putnik.
     * @param {putnikUpdateArgs} args - Arguments to update one Putnik.
     * @example
     * // Update one Putnik
     * const putnik = await prisma.putnik.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends putnikUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, putnikUpdateArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Putniks.
     * @param {putnikDeleteManyArgs} args - Arguments to filter Putniks to delete.
     * @example
     * // Delete a few Putniks
     * const { count } = await prisma.putnik.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends putnikDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, putnikDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Putniks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {putnikUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Putniks
     * const putnik = await prisma.putnik.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends putnikUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, putnikUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Putnik.
     * @param {putnikUpsertArgs} args - Arguments to update or create a Putnik.
     * @example
     * // Update or create a Putnik
     * const putnik = await prisma.putnik.upsert({
     *   create: {
     *     // ... data to create a Putnik
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Putnik we want to update
     *   }
     * })
    **/
    upsert<T extends putnikUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, putnikUpsertArgs<ExtArgs>>
    ): Prisma__putnikClient<$Result.GetResult<Prisma.$putnikPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Putniks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {putnikCountArgs} args - Arguments to filter Putniks to count.
     * @example
     * // Count the number of Putniks
     * const count = await prisma.putnik.count({
     *   where: {
     *     // ... the filter for the Putniks we want to count
     *   }
     * })
    **/
    count<T extends putnikCountArgs>(
      args?: Subset<T, putnikCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PutnikCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Putnik.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PutnikAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PutnikAggregateArgs>(args: Subset<T, PutnikAggregateArgs>): Prisma.PrismaPromise<GetPutnikAggregateType<T>>

    /**
     * Group by Putnik.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {putnikGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends putnikGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: putnikGroupByArgs['orderBy'] }
        : { orderBy?: putnikGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, putnikGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPutnikGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the putnik model
   */
  readonly fields: putnikFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for putnik.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__putnikClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the putnik model
   */ 
  interface putnikFieldRefs {
    readonly id: FieldRef<"putnik", 'Int'>
    readonly Email: FieldRef<"putnik", 'String'>
    readonly Password: FieldRef<"putnik", 'String'>
    readonly ime: FieldRef<"putnik", 'String'>
    readonly prezime: FieldRef<"putnik", 'String'>
    readonly broj_telefona: FieldRef<"putnik", 'String'>
    readonly prebivaliste: FieldRef<"putnik", 'String'>
  }
    

  // Custom InputTypes
  /**
   * putnik findUnique
   */
  export type putnikFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * Filter, which putnik to fetch.
     */
    where: putnikWhereUniqueInput
  }

  /**
   * putnik findUniqueOrThrow
   */
  export type putnikFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * Filter, which putnik to fetch.
     */
    where: putnikWhereUniqueInput
  }

  /**
   * putnik findFirst
   */
  export type putnikFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * Filter, which putnik to fetch.
     */
    where?: putnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of putniks to fetch.
     */
    orderBy?: putnikOrderByWithRelationInput | putnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for putniks.
     */
    cursor?: putnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` putniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` putniks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of putniks.
     */
    distinct?: PutnikScalarFieldEnum | PutnikScalarFieldEnum[]
  }

  /**
   * putnik findFirstOrThrow
   */
  export type putnikFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * Filter, which putnik to fetch.
     */
    where?: putnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of putniks to fetch.
     */
    orderBy?: putnikOrderByWithRelationInput | putnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for putniks.
     */
    cursor?: putnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` putniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` putniks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of putniks.
     */
    distinct?: PutnikScalarFieldEnum | PutnikScalarFieldEnum[]
  }

  /**
   * putnik findMany
   */
  export type putnikFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * Filter, which putniks to fetch.
     */
    where?: putnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of putniks to fetch.
     */
    orderBy?: putnikOrderByWithRelationInput | putnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing putniks.
     */
    cursor?: putnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` putniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` putniks.
     */
    skip?: number
    distinct?: PutnikScalarFieldEnum | PutnikScalarFieldEnum[]
  }

  /**
   * putnik create
   */
  export type putnikCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * The data needed to create a putnik.
     */
    data: XOR<putnikCreateInput, putnikUncheckedCreateInput>
  }

  /**
   * putnik createMany
   */
  export type putnikCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many putniks.
     */
    data: putnikCreateManyInput | putnikCreateManyInput[]
  }

  /**
   * putnik createManyAndReturn
   */
  export type putnikCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many putniks.
     */
    data: putnikCreateManyInput | putnikCreateManyInput[]
  }

  /**
   * putnik update
   */
  export type putnikUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * The data needed to update a putnik.
     */
    data: XOR<putnikUpdateInput, putnikUncheckedUpdateInput>
    /**
     * Choose, which putnik to update.
     */
    where: putnikWhereUniqueInput
  }

  /**
   * putnik updateMany
   */
  export type putnikUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update putniks.
     */
    data: XOR<putnikUpdateManyMutationInput, putnikUncheckedUpdateManyInput>
    /**
     * Filter which putniks to update
     */
    where?: putnikWhereInput
  }

  /**
   * putnik upsert
   */
  export type putnikUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * The filter to search for the putnik to update in case it exists.
     */
    where: putnikWhereUniqueInput
    /**
     * In case the putnik found by the `where` argument doesn't exist, create a new putnik with this data.
     */
    create: XOR<putnikCreateInput, putnikUncheckedCreateInput>
    /**
     * In case the putnik was found with the provided `where` argument, update it with this data.
     */
    update: XOR<putnikUpdateInput, putnikUncheckedUpdateInput>
  }

  /**
   * putnik delete
   */
  export type putnikDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
    /**
     * Filter which putnik to delete.
     */
    where: putnikWhereUniqueInput
  }

  /**
   * putnik deleteMany
   */
  export type putnikDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which putniks to delete
     */
    where?: putnikWhereInput
  }

  /**
   * putnik without action
   */
  export type putnikDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the putnik
     */
    select?: putnikSelect<ExtArgs> | null
  }


  /**
   * Model usr
   */

  export type AggregateUsr = {
    _count: UsrCountAggregateOutputType | null
    _avg: UsrAvgAggregateOutputType | null
    _sum: UsrSumAggregateOutputType | null
    _min: UsrMinAggregateOutputType | null
    _max: UsrMaxAggregateOutputType | null
  }

  export type UsrAvgAggregateOutputType = {
    id: number | null
  }

  export type UsrSumAggregateOutputType = {
    id: number | null
  }

  export type UsrMinAggregateOutputType = {
    id: number | null
    Email: string | null
    Password: string | null
    username: string | null
    admin_check: boolean | null
  }

  export type UsrMaxAggregateOutputType = {
    id: number | null
    Email: string | null
    Password: string | null
    username: string | null
    admin_check: boolean | null
  }

  export type UsrCountAggregateOutputType = {
    id: number
    Email: number
    Password: number
    username: number
    admin_check: number
    _all: number
  }


  export type UsrAvgAggregateInputType = {
    id?: true
  }

  export type UsrSumAggregateInputType = {
    id?: true
  }

  export type UsrMinAggregateInputType = {
    id?: true
    Email?: true
    Password?: true
    username?: true
    admin_check?: true
  }

  export type UsrMaxAggregateInputType = {
    id?: true
    Email?: true
    Password?: true
    username?: true
    admin_check?: true
  }

  export type UsrCountAggregateInputType = {
    id?: true
    Email?: true
    Password?: true
    username?: true
    admin_check?: true
    _all?: true
  }

  export type UsrAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usr to aggregate.
     */
    where?: usrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usrs to fetch.
     */
    orderBy?: usrOrderByWithRelationInput | usrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usrs
    **/
    _count?: true | UsrCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsrAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsrSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsrMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsrMaxAggregateInputType
  }

  export type GetUsrAggregateType<T extends UsrAggregateArgs> = {
        [P in keyof T & keyof AggregateUsr]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsr[P]>
      : GetScalarType<T[P], AggregateUsr[P]>
  }




  export type usrGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usrWhereInput
    orderBy?: usrOrderByWithAggregationInput | usrOrderByWithAggregationInput[]
    by: UsrScalarFieldEnum[] | UsrScalarFieldEnum
    having?: usrScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsrCountAggregateInputType | true
    _avg?: UsrAvgAggregateInputType
    _sum?: UsrSumAggregateInputType
    _min?: UsrMinAggregateInputType
    _max?: UsrMaxAggregateInputType
  }

  export type UsrGroupByOutputType = {
    id: number
    Email: string
    Password: string
    username: string
    admin_check: boolean
    _count: UsrCountAggregateOutputType | null
    _avg: UsrAvgAggregateOutputType | null
    _sum: UsrSumAggregateOutputType | null
    _min: UsrMinAggregateOutputType | null
    _max: UsrMaxAggregateOutputType | null
  }

  type GetUsrGroupByPayload<T extends usrGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsrGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsrGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsrGroupByOutputType[P]>
            : GetScalarType<T[P], UsrGroupByOutputType[P]>
        }
      >
    >


  export type usrSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Email?: boolean
    Password?: boolean
    username?: boolean
    admin_check?: boolean
    voznje?: boolean | usr$voznjeArgs<ExtArgs>
    _count?: boolean | UsrCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usr"]>

  export type usrSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Email?: boolean
    Password?: boolean
    username?: boolean
    admin_check?: boolean
  }, ExtArgs["result"]["usr"]>

  export type usrSelectScalar = {
    id?: boolean
    Email?: boolean
    Password?: boolean
    username?: boolean
    admin_check?: boolean
  }

  export type usrInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    voznje?: boolean | usr$voznjeArgs<ExtArgs>
    _count?: boolean | UsrCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usrIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usrPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usr"
    objects: {
      voznje: Prisma.$voznjaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Email: string
      Password: string
      username: string
      admin_check: boolean
    }, ExtArgs["result"]["usr"]>
    composites: {}
  }

  type usrGetPayload<S extends boolean | null | undefined | usrDefaultArgs> = $Result.GetResult<Prisma.$usrPayload, S>

  type usrCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usrFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsrCountAggregateInputType | true
    }

  export interface usrDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usr'], meta: { name: 'usr' } }
    /**
     * Find zero or one Usr that matches the filter.
     * @param {usrFindUniqueArgs} args - Arguments to find a Usr
     * @example
     * // Get one Usr
     * const usr = await prisma.usr.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usrFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usrFindUniqueArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usr that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usrFindUniqueOrThrowArgs} args - Arguments to find a Usr
     * @example
     * // Get one Usr
     * const usr = await prisma.usr.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usrFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usrFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usr that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usrFindFirstArgs} args - Arguments to find a Usr
     * @example
     * // Get one Usr
     * const usr = await prisma.usr.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usrFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usrFindFirstArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usr that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usrFindFirstOrThrowArgs} args - Arguments to find a Usr
     * @example
     * // Get one Usr
     * const usr = await prisma.usr.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usrFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usrFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usrs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usrFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usrs
     * const usrs = await prisma.usr.findMany()
     * 
     * // Get first 10 Usrs
     * const usrs = await prisma.usr.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usrWithIdOnly = await prisma.usr.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usrFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usrFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usr.
     * @param {usrCreateArgs} args - Arguments to create a Usr.
     * @example
     * // Create one Usr
     * const Usr = await prisma.usr.create({
     *   data: {
     *     // ... data to create a Usr
     *   }
     * })
     * 
    **/
    create<T extends usrCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usrCreateArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usrs.
     * @param {usrCreateManyArgs} args - Arguments to create many Usrs.
     * @example
     * // Create many Usrs
     * const usr = await prisma.usr.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends usrCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usrCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usrs and returns the data saved in the database.
     * @param {usrCreateManyAndReturnArgs} args - Arguments to create many Usrs.
     * @example
     * // Create many Usrs
     * const usr = await prisma.usr.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usrs and only return the `id`
     * const usrWithIdOnly = await prisma.usr.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends usrCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, usrCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Usr.
     * @param {usrDeleteArgs} args - Arguments to delete one Usr.
     * @example
     * // Delete one Usr
     * const Usr = await prisma.usr.delete({
     *   where: {
     *     // ... filter to delete one Usr
     *   }
     * })
     * 
    **/
    delete<T extends usrDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usrDeleteArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usr.
     * @param {usrUpdateArgs} args - Arguments to update one Usr.
     * @example
     * // Update one Usr
     * const usr = await prisma.usr.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usrUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usrUpdateArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usrs.
     * @param {usrDeleteManyArgs} args - Arguments to filter Usrs to delete.
     * @example
     * // Delete a few Usrs
     * const { count } = await prisma.usr.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usrDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usrDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usrs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usrUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usrs
     * const usr = await prisma.usr.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usrUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usrUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usr.
     * @param {usrUpsertArgs} args - Arguments to update or create a Usr.
     * @example
     * // Update or create a Usr
     * const usr = await prisma.usr.upsert({
     *   create: {
     *     // ... data to create a Usr
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usr we want to update
     *   }
     * })
    **/
    upsert<T extends usrUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usrUpsertArgs<ExtArgs>>
    ): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usrs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usrCountArgs} args - Arguments to filter Usrs to count.
     * @example
     * // Count the number of Usrs
     * const count = await prisma.usr.count({
     *   where: {
     *     // ... the filter for the Usrs we want to count
     *   }
     * })
    **/
    count<T extends usrCountArgs>(
      args?: Subset<T, usrCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsrCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usr.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsrAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsrAggregateArgs>(args: Subset<T, UsrAggregateArgs>): Prisma.PrismaPromise<GetUsrAggregateType<T>>

    /**
     * Group by Usr.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usrGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usrGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usrGroupByArgs['orderBy'] }
        : { orderBy?: usrGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usrGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsrGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usr model
   */
  readonly fields: usrFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usr.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usrClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    voznje<T extends usr$voznjeArgs<ExtArgs> = {}>(args?: Subset<T, usr$voznjeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usr model
   */ 
  interface usrFieldRefs {
    readonly id: FieldRef<"usr", 'Int'>
    readonly Email: FieldRef<"usr", 'String'>
    readonly Password: FieldRef<"usr", 'String'>
    readonly username: FieldRef<"usr", 'String'>
    readonly admin_check: FieldRef<"usr", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * usr findUnique
   */
  export type usrFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * Filter, which usr to fetch.
     */
    where: usrWhereUniqueInput
  }

  /**
   * usr findUniqueOrThrow
   */
  export type usrFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * Filter, which usr to fetch.
     */
    where: usrWhereUniqueInput
  }

  /**
   * usr findFirst
   */
  export type usrFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * Filter, which usr to fetch.
     */
    where?: usrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usrs to fetch.
     */
    orderBy?: usrOrderByWithRelationInput | usrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usrs.
     */
    cursor?: usrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usrs.
     */
    distinct?: UsrScalarFieldEnum | UsrScalarFieldEnum[]
  }

  /**
   * usr findFirstOrThrow
   */
  export type usrFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * Filter, which usr to fetch.
     */
    where?: usrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usrs to fetch.
     */
    orderBy?: usrOrderByWithRelationInput | usrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usrs.
     */
    cursor?: usrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usrs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usrs.
     */
    distinct?: UsrScalarFieldEnum | UsrScalarFieldEnum[]
  }

  /**
   * usr findMany
   */
  export type usrFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * Filter, which usrs to fetch.
     */
    where?: usrWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usrs to fetch.
     */
    orderBy?: usrOrderByWithRelationInput | usrOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usrs.
     */
    cursor?: usrWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usrs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usrs.
     */
    skip?: number
    distinct?: UsrScalarFieldEnum | UsrScalarFieldEnum[]
  }

  /**
   * usr create
   */
  export type usrCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * The data needed to create a usr.
     */
    data: XOR<usrCreateInput, usrUncheckedCreateInput>
  }

  /**
   * usr createMany
   */
  export type usrCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usrs.
     */
    data: usrCreateManyInput | usrCreateManyInput[]
  }

  /**
   * usr createManyAndReturn
   */
  export type usrCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many usrs.
     */
    data: usrCreateManyInput | usrCreateManyInput[]
  }

  /**
   * usr update
   */
  export type usrUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * The data needed to update a usr.
     */
    data: XOR<usrUpdateInput, usrUncheckedUpdateInput>
    /**
     * Choose, which usr to update.
     */
    where: usrWhereUniqueInput
  }

  /**
   * usr updateMany
   */
  export type usrUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usrs.
     */
    data: XOR<usrUpdateManyMutationInput, usrUncheckedUpdateManyInput>
    /**
     * Filter which usrs to update
     */
    where?: usrWhereInput
  }

  /**
   * usr upsert
   */
  export type usrUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * The filter to search for the usr to update in case it exists.
     */
    where: usrWhereUniqueInput
    /**
     * In case the usr found by the `where` argument doesn't exist, create a new usr with this data.
     */
    create: XOR<usrCreateInput, usrUncheckedCreateInput>
    /**
     * In case the usr was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usrUpdateInput, usrUncheckedUpdateInput>
  }

  /**
   * usr delete
   */
  export type usrDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
    /**
     * Filter which usr to delete.
     */
    where: usrWhereUniqueInput
  }

  /**
   * usr deleteMany
   */
  export type usrDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usrs to delete
     */
    where?: usrWhereInput
  }

  /**
   * usr.voznje
   */
  export type usr$voznjeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    where?: voznjaWhereInput
    orderBy?: voznjaOrderByWithRelationInput | voznjaOrderByWithRelationInput[]
    cursor?: voznjaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoznjaScalarFieldEnum | VoznjaScalarFieldEnum[]
  }

  /**
   * usr without action
   */
  export type usrDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usr
     */
    select?: usrSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usrInclude<ExtArgs> | null
  }


  /**
   * Model voznja
   */

  export type AggregateVoznja = {
    _count: VoznjaCountAggregateOutputType | null
    _avg: VoznjaAvgAggregateOutputType | null
    _sum: VoznjaSumAggregateOutputType | null
    _min: VoznjaMinAggregateOutputType | null
    _max: VoznjaMaxAggregateOutputType | null
  }

  export type VoznjaAvgAggregateOutputType = {
    id: number | null
    usrId: number | null
    Broj_mesta: number | null
    Cena: number | null
  }

  export type VoznjaSumAggregateOutputType = {
    id: number | null
    usrId: number | null
    Broj_mesta: number | null
    Cena: number | null
  }

  export type VoznjaMinAggregateOutputType = {
    id: number | null
    usrId: number | null
    pocetna_destinacija: string | null
    krajnja_destinacija: string | null
    mesto_polaska: string | null
    Broj_mesta: number | null
    Datum_i_vreme_polaska: Date | null
    Cena: number | null
  }

  export type VoznjaMaxAggregateOutputType = {
    id: number | null
    usrId: number | null
    pocetna_destinacija: string | null
    krajnja_destinacija: string | null
    mesto_polaska: string | null
    Broj_mesta: number | null
    Datum_i_vreme_polaska: Date | null
    Cena: number | null
  }

  export type VoznjaCountAggregateOutputType = {
    id: number
    usrId: number
    pocetna_destinacija: number
    krajnja_destinacija: number
    mesto_polaska: number
    Broj_mesta: number
    Datum_i_vreme_polaska: number
    Cena: number
    _all: number
  }


  export type VoznjaAvgAggregateInputType = {
    id?: true
    usrId?: true
    Broj_mesta?: true
    Cena?: true
  }

  export type VoznjaSumAggregateInputType = {
    id?: true
    usrId?: true
    Broj_mesta?: true
    Cena?: true
  }

  export type VoznjaMinAggregateInputType = {
    id?: true
    usrId?: true
    pocetna_destinacija?: true
    krajnja_destinacija?: true
    mesto_polaska?: true
    Broj_mesta?: true
    Datum_i_vreme_polaska?: true
    Cena?: true
  }

  export type VoznjaMaxAggregateInputType = {
    id?: true
    usrId?: true
    pocetna_destinacija?: true
    krajnja_destinacija?: true
    mesto_polaska?: true
    Broj_mesta?: true
    Datum_i_vreme_polaska?: true
    Cena?: true
  }

  export type VoznjaCountAggregateInputType = {
    id?: true
    usrId?: true
    pocetna_destinacija?: true
    krajnja_destinacija?: true
    mesto_polaska?: true
    Broj_mesta?: true
    Datum_i_vreme_polaska?: true
    Cena?: true
    _all?: true
  }

  export type VoznjaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which voznja to aggregate.
     */
    where?: voznjaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voznjas to fetch.
     */
    orderBy?: voznjaOrderByWithRelationInput | voznjaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: voznjaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voznjas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voznjas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned voznjas
    **/
    _count?: true | VoznjaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoznjaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoznjaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoznjaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoznjaMaxAggregateInputType
  }

  export type GetVoznjaAggregateType<T extends VoznjaAggregateArgs> = {
        [P in keyof T & keyof AggregateVoznja]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoznja[P]>
      : GetScalarType<T[P], AggregateVoznja[P]>
  }




  export type voznjaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: voznjaWhereInput
    orderBy?: voznjaOrderByWithAggregationInput | voznjaOrderByWithAggregationInput[]
    by: VoznjaScalarFieldEnum[] | VoznjaScalarFieldEnum
    having?: voznjaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoznjaCountAggregateInputType | true
    _avg?: VoznjaAvgAggregateInputType
    _sum?: VoznjaSumAggregateInputType
    _min?: VoznjaMinAggregateInputType
    _max?: VoznjaMaxAggregateInputType
  }

  export type VoznjaGroupByOutputType = {
    id: number
    usrId: number
    pocetna_destinacija: string
    krajnja_destinacija: string
    mesto_polaska: string
    Broj_mesta: number
    Datum_i_vreme_polaska: Date
    Cena: number
    _count: VoznjaCountAggregateOutputType | null
    _avg: VoznjaAvgAggregateOutputType | null
    _sum: VoznjaSumAggregateOutputType | null
    _min: VoznjaMinAggregateOutputType | null
    _max: VoznjaMaxAggregateOutputType | null
  }

  type GetVoznjaGroupByPayload<T extends voznjaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoznjaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoznjaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoznjaGroupByOutputType[P]>
            : GetScalarType<T[P], VoznjaGroupByOutputType[P]>
        }
      >
    >


  export type voznjaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usrId?: boolean
    pocetna_destinacija?: boolean
    krajnja_destinacija?: boolean
    mesto_polaska?: boolean
    Broj_mesta?: boolean
    Datum_i_vreme_polaska?: boolean
    Cena?: boolean
    vozac?: boolean | usrDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voznja"]>

  export type voznjaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usrId?: boolean
    pocetna_destinacija?: boolean
    krajnja_destinacija?: boolean
    mesto_polaska?: boolean
    Broj_mesta?: boolean
    Datum_i_vreme_polaska?: boolean
    Cena?: boolean
    vozac?: boolean | usrDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voznja"]>

  export type voznjaSelectScalar = {
    id?: boolean
    usrId?: boolean
    pocetna_destinacija?: boolean
    krajnja_destinacija?: boolean
    mesto_polaska?: boolean
    Broj_mesta?: boolean
    Datum_i_vreme_polaska?: boolean
    Cena?: boolean
  }

  export type voznjaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vozac?: boolean | usrDefaultArgs<ExtArgs>
  }
  export type voznjaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vozac?: boolean | usrDefaultArgs<ExtArgs>
  }

  export type $voznjaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "voznja"
    objects: {
      vozac: Prisma.$usrPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usrId: number
      pocetna_destinacija: string
      krajnja_destinacija: string
      mesto_polaska: string
      Broj_mesta: number
      Datum_i_vreme_polaska: Date
      Cena: number
    }, ExtArgs["result"]["voznja"]>
    composites: {}
  }

  type voznjaGetPayload<S extends boolean | null | undefined | voznjaDefaultArgs> = $Result.GetResult<Prisma.$voznjaPayload, S>

  type voznjaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<voznjaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VoznjaCountAggregateInputType | true
    }

  export interface voznjaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['voznja'], meta: { name: 'voznja' } }
    /**
     * Find zero or one Voznja that matches the filter.
     * @param {voznjaFindUniqueArgs} args - Arguments to find a Voznja
     * @example
     * // Get one Voznja
     * const voznja = await prisma.voznja.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends voznjaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, voznjaFindUniqueArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Voznja that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {voznjaFindUniqueOrThrowArgs} args - Arguments to find a Voznja
     * @example
     * // Get one Voznja
     * const voznja = await prisma.voznja.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends voznjaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, voznjaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Voznja that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voznjaFindFirstArgs} args - Arguments to find a Voznja
     * @example
     * // Get one Voznja
     * const voznja = await prisma.voznja.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends voznjaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, voznjaFindFirstArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Voznja that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voznjaFindFirstOrThrowArgs} args - Arguments to find a Voznja
     * @example
     * // Get one Voznja
     * const voznja = await prisma.voznja.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends voznjaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, voznjaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Voznjas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voznjaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Voznjas
     * const voznjas = await prisma.voznja.findMany()
     * 
     * // Get first 10 Voznjas
     * const voznjas = await prisma.voznja.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voznjaWithIdOnly = await prisma.voznja.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends voznjaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, voznjaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Voznja.
     * @param {voznjaCreateArgs} args - Arguments to create a Voznja.
     * @example
     * // Create one Voznja
     * const Voznja = await prisma.voznja.create({
     *   data: {
     *     // ... data to create a Voznja
     *   }
     * })
     * 
    **/
    create<T extends voznjaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, voznjaCreateArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Voznjas.
     * @param {voznjaCreateManyArgs} args - Arguments to create many Voznjas.
     * @example
     * // Create many Voznjas
     * const voznja = await prisma.voznja.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends voznjaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, voznjaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Voznjas and returns the data saved in the database.
     * @param {voznjaCreateManyAndReturnArgs} args - Arguments to create many Voznjas.
     * @example
     * // Create many Voznjas
     * const voznja = await prisma.voznja.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Voznjas and only return the `id`
     * const voznjaWithIdOnly = await prisma.voznja.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends voznjaCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, voznjaCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Voznja.
     * @param {voznjaDeleteArgs} args - Arguments to delete one Voznja.
     * @example
     * // Delete one Voznja
     * const Voznja = await prisma.voznja.delete({
     *   where: {
     *     // ... filter to delete one Voznja
     *   }
     * })
     * 
    **/
    delete<T extends voznjaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, voznjaDeleteArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Voznja.
     * @param {voznjaUpdateArgs} args - Arguments to update one Voznja.
     * @example
     * // Update one Voznja
     * const voznja = await prisma.voznja.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends voznjaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, voznjaUpdateArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Voznjas.
     * @param {voznjaDeleteManyArgs} args - Arguments to filter Voznjas to delete.
     * @example
     * // Delete a few Voznjas
     * const { count } = await prisma.voznja.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends voznjaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, voznjaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Voznjas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voznjaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Voznjas
     * const voznja = await prisma.voznja.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends voznjaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, voznjaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Voznja.
     * @param {voznjaUpsertArgs} args - Arguments to update or create a Voznja.
     * @example
     * // Update or create a Voznja
     * const voznja = await prisma.voznja.upsert({
     *   create: {
     *     // ... data to create a Voznja
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voznja we want to update
     *   }
     * })
    **/
    upsert<T extends voznjaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, voznjaUpsertArgs<ExtArgs>>
    ): Prisma__voznjaClient<$Result.GetResult<Prisma.$voznjaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Voznjas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voznjaCountArgs} args - Arguments to filter Voznjas to count.
     * @example
     * // Count the number of Voznjas
     * const count = await prisma.voznja.count({
     *   where: {
     *     // ... the filter for the Voznjas we want to count
     *   }
     * })
    **/
    count<T extends voznjaCountArgs>(
      args?: Subset<T, voznjaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoznjaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voznja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoznjaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoznjaAggregateArgs>(args: Subset<T, VoznjaAggregateArgs>): Prisma.PrismaPromise<GetVoznjaAggregateType<T>>

    /**
     * Group by Voznja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voznjaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends voznjaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: voznjaGroupByArgs['orderBy'] }
        : { orderBy?: voznjaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, voznjaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoznjaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the voznja model
   */
  readonly fields: voznjaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for voznja.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__voznjaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    vozac<T extends usrDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usrDefaultArgs<ExtArgs>>): Prisma__usrClient<$Result.GetResult<Prisma.$usrPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the voznja model
   */ 
  interface voznjaFieldRefs {
    readonly id: FieldRef<"voznja", 'Int'>
    readonly usrId: FieldRef<"voznja", 'Int'>
    readonly pocetna_destinacija: FieldRef<"voznja", 'String'>
    readonly krajnja_destinacija: FieldRef<"voznja", 'String'>
    readonly mesto_polaska: FieldRef<"voznja", 'String'>
    readonly Broj_mesta: FieldRef<"voznja", 'Int'>
    readonly Datum_i_vreme_polaska: FieldRef<"voznja", 'DateTime'>
    readonly Cena: FieldRef<"voznja", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * voznja findUnique
   */
  export type voznjaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * Filter, which voznja to fetch.
     */
    where: voznjaWhereUniqueInput
  }

  /**
   * voznja findUniqueOrThrow
   */
  export type voznjaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * Filter, which voznja to fetch.
     */
    where: voznjaWhereUniqueInput
  }

  /**
   * voznja findFirst
   */
  export type voznjaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * Filter, which voznja to fetch.
     */
    where?: voznjaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voznjas to fetch.
     */
    orderBy?: voznjaOrderByWithRelationInput | voznjaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voznjas.
     */
    cursor?: voznjaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voznjas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voznjas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voznjas.
     */
    distinct?: VoznjaScalarFieldEnum | VoznjaScalarFieldEnum[]
  }

  /**
   * voznja findFirstOrThrow
   */
  export type voznjaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * Filter, which voznja to fetch.
     */
    where?: voznjaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voznjas to fetch.
     */
    orderBy?: voznjaOrderByWithRelationInput | voznjaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voznjas.
     */
    cursor?: voznjaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voznjas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voznjas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voznjas.
     */
    distinct?: VoznjaScalarFieldEnum | VoznjaScalarFieldEnum[]
  }

  /**
   * voznja findMany
   */
  export type voznjaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * Filter, which voznjas to fetch.
     */
    where?: voznjaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voznjas to fetch.
     */
    orderBy?: voznjaOrderByWithRelationInput | voznjaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing voznjas.
     */
    cursor?: voznjaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voznjas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voznjas.
     */
    skip?: number
    distinct?: VoznjaScalarFieldEnum | VoznjaScalarFieldEnum[]
  }

  /**
   * voznja create
   */
  export type voznjaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * The data needed to create a voznja.
     */
    data: XOR<voznjaCreateInput, voznjaUncheckedCreateInput>
  }

  /**
   * voznja createMany
   */
  export type voznjaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many voznjas.
     */
    data: voznjaCreateManyInput | voznjaCreateManyInput[]
  }

  /**
   * voznja createManyAndReturn
   */
  export type voznjaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many voznjas.
     */
    data: voznjaCreateManyInput | voznjaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * voznja update
   */
  export type voznjaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * The data needed to update a voznja.
     */
    data: XOR<voznjaUpdateInput, voznjaUncheckedUpdateInput>
    /**
     * Choose, which voznja to update.
     */
    where: voznjaWhereUniqueInput
  }

  /**
   * voznja updateMany
   */
  export type voznjaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update voznjas.
     */
    data: XOR<voznjaUpdateManyMutationInput, voznjaUncheckedUpdateManyInput>
    /**
     * Filter which voznjas to update
     */
    where?: voznjaWhereInput
  }

  /**
   * voznja upsert
   */
  export type voznjaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * The filter to search for the voznja to update in case it exists.
     */
    where: voznjaWhereUniqueInput
    /**
     * In case the voznja found by the `where` argument doesn't exist, create a new voznja with this data.
     */
    create: XOR<voznjaCreateInput, voznjaUncheckedCreateInput>
    /**
     * In case the voznja was found with the provided `where` argument, update it with this data.
     */
    update: XOR<voznjaUpdateInput, voznjaUncheckedUpdateInput>
  }

  /**
   * voznja delete
   */
  export type voznjaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
    /**
     * Filter which voznja to delete.
     */
    where: voznjaWhereUniqueInput
  }

  /**
   * voznja deleteMany
   */
  export type voznjaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which voznjas to delete
     */
    where?: voznjaWhereInput
  }

  /**
   * voznja without action
   */
  export type voznjaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voznja
     */
    select?: voznjaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voznjaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PutnikScalarFieldEnum: {
    id: 'id',
    Email: 'Email',
    Password: 'Password',
    ime: 'ime',
    prezime: 'prezime',
    broj_telefona: 'broj_telefona',
    prebivaliste: 'prebivaliste'
  };

  export type PutnikScalarFieldEnum = (typeof PutnikScalarFieldEnum)[keyof typeof PutnikScalarFieldEnum]


  export const UsrScalarFieldEnum: {
    id: 'id',
    Email: 'Email',
    Password: 'Password',
    username: 'username',
    admin_check: 'admin_check'
  };

  export type UsrScalarFieldEnum = (typeof UsrScalarFieldEnum)[keyof typeof UsrScalarFieldEnum]


  export const VoznjaScalarFieldEnum: {
    id: 'id',
    usrId: 'usrId',
    pocetna_destinacija: 'pocetna_destinacija',
    krajnja_destinacija: 'krajnja_destinacija',
    mesto_polaska: 'mesto_polaska',
    Broj_mesta: 'Broj_mesta',
    Datum_i_vreme_polaska: 'Datum_i_vreme_polaska',
    Cena: 'Cena'
  };

  export type VoznjaScalarFieldEnum = (typeof VoznjaScalarFieldEnum)[keyof typeof VoznjaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type putnikWhereInput = {
    AND?: putnikWhereInput | putnikWhereInput[]
    OR?: putnikWhereInput[]
    NOT?: putnikWhereInput | putnikWhereInput[]
    id?: IntFilter<"putnik"> | number
    Email?: StringFilter<"putnik"> | string
    Password?: StringFilter<"putnik"> | string
    ime?: StringFilter<"putnik"> | string
    prezime?: StringFilter<"putnik"> | string
    broj_telefona?: StringFilter<"putnik"> | string
    prebivaliste?: StringFilter<"putnik"> | string
  }

  export type putnikOrderByWithRelationInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    ime?: SortOrder
    prezime?: SortOrder
    broj_telefona?: SortOrder
    prebivaliste?: SortOrder
  }

  export type putnikWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    Email?: string
    AND?: putnikWhereInput | putnikWhereInput[]
    OR?: putnikWhereInput[]
    NOT?: putnikWhereInput | putnikWhereInput[]
    Password?: StringFilter<"putnik"> | string
    ime?: StringFilter<"putnik"> | string
    prezime?: StringFilter<"putnik"> | string
    broj_telefona?: StringFilter<"putnik"> | string
    prebivaliste?: StringFilter<"putnik"> | string
  }, "id" | "Email">

  export type putnikOrderByWithAggregationInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    ime?: SortOrder
    prezime?: SortOrder
    broj_telefona?: SortOrder
    prebivaliste?: SortOrder
    _count?: putnikCountOrderByAggregateInput
    _avg?: putnikAvgOrderByAggregateInput
    _max?: putnikMaxOrderByAggregateInput
    _min?: putnikMinOrderByAggregateInput
    _sum?: putnikSumOrderByAggregateInput
  }

  export type putnikScalarWhereWithAggregatesInput = {
    AND?: putnikScalarWhereWithAggregatesInput | putnikScalarWhereWithAggregatesInput[]
    OR?: putnikScalarWhereWithAggregatesInput[]
    NOT?: putnikScalarWhereWithAggregatesInput | putnikScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"putnik"> | number
    Email?: StringWithAggregatesFilter<"putnik"> | string
    Password?: StringWithAggregatesFilter<"putnik"> | string
    ime?: StringWithAggregatesFilter<"putnik"> | string
    prezime?: StringWithAggregatesFilter<"putnik"> | string
    broj_telefona?: StringWithAggregatesFilter<"putnik"> | string
    prebivaliste?: StringWithAggregatesFilter<"putnik"> | string
  }

  export type usrWhereInput = {
    AND?: usrWhereInput | usrWhereInput[]
    OR?: usrWhereInput[]
    NOT?: usrWhereInput | usrWhereInput[]
    id?: IntFilter<"usr"> | number
    Email?: StringFilter<"usr"> | string
    Password?: StringFilter<"usr"> | string
    username?: StringFilter<"usr"> | string
    admin_check?: BoolFilter<"usr"> | boolean
    voznje?: VoznjaListRelationFilter
  }

  export type usrOrderByWithRelationInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    username?: SortOrder
    admin_check?: SortOrder
    voznje?: voznjaOrderByRelationAggregateInput
  }

  export type usrWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    Email?: string
    AND?: usrWhereInput | usrWhereInput[]
    OR?: usrWhereInput[]
    NOT?: usrWhereInput | usrWhereInput[]
    Password?: StringFilter<"usr"> | string
    username?: StringFilter<"usr"> | string
    admin_check?: BoolFilter<"usr"> | boolean
    voznje?: VoznjaListRelationFilter
  }, "id" | "Email">

  export type usrOrderByWithAggregationInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    username?: SortOrder
    admin_check?: SortOrder
    _count?: usrCountOrderByAggregateInput
    _avg?: usrAvgOrderByAggregateInput
    _max?: usrMaxOrderByAggregateInput
    _min?: usrMinOrderByAggregateInput
    _sum?: usrSumOrderByAggregateInput
  }

  export type usrScalarWhereWithAggregatesInput = {
    AND?: usrScalarWhereWithAggregatesInput | usrScalarWhereWithAggregatesInput[]
    OR?: usrScalarWhereWithAggregatesInput[]
    NOT?: usrScalarWhereWithAggregatesInput | usrScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usr"> | number
    Email?: StringWithAggregatesFilter<"usr"> | string
    Password?: StringWithAggregatesFilter<"usr"> | string
    username?: StringWithAggregatesFilter<"usr"> | string
    admin_check?: BoolWithAggregatesFilter<"usr"> | boolean
  }

  export type voznjaWhereInput = {
    AND?: voznjaWhereInput | voznjaWhereInput[]
    OR?: voznjaWhereInput[]
    NOT?: voznjaWhereInput | voznjaWhereInput[]
    id?: IntFilter<"voznja"> | number
    usrId?: IntFilter<"voznja"> | number
    pocetna_destinacija?: StringFilter<"voznja"> | string
    krajnja_destinacija?: StringFilter<"voznja"> | string
    mesto_polaska?: StringFilter<"voznja"> | string
    Broj_mesta?: IntFilter<"voznja"> | number
    Datum_i_vreme_polaska?: DateTimeFilter<"voznja"> | Date | string
    Cena?: FloatFilter<"voznja"> | number
    vozac?: XOR<UsrRelationFilter, usrWhereInput>
  }

  export type voznjaOrderByWithRelationInput = {
    id?: SortOrder
    usrId?: SortOrder
    pocetna_destinacija?: SortOrder
    krajnja_destinacija?: SortOrder
    mesto_polaska?: SortOrder
    Broj_mesta?: SortOrder
    Datum_i_vreme_polaska?: SortOrder
    Cena?: SortOrder
    vozac?: usrOrderByWithRelationInput
  }

  export type voznjaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: voznjaWhereInput | voznjaWhereInput[]
    OR?: voznjaWhereInput[]
    NOT?: voznjaWhereInput | voznjaWhereInput[]
    usrId?: IntFilter<"voznja"> | number
    pocetna_destinacija?: StringFilter<"voznja"> | string
    krajnja_destinacija?: StringFilter<"voznja"> | string
    mesto_polaska?: StringFilter<"voznja"> | string
    Broj_mesta?: IntFilter<"voznja"> | number
    Datum_i_vreme_polaska?: DateTimeFilter<"voznja"> | Date | string
    Cena?: FloatFilter<"voznja"> | number
    vozac?: XOR<UsrRelationFilter, usrWhereInput>
  }, "id">

  export type voznjaOrderByWithAggregationInput = {
    id?: SortOrder
    usrId?: SortOrder
    pocetna_destinacija?: SortOrder
    krajnja_destinacija?: SortOrder
    mesto_polaska?: SortOrder
    Broj_mesta?: SortOrder
    Datum_i_vreme_polaska?: SortOrder
    Cena?: SortOrder
    _count?: voznjaCountOrderByAggregateInput
    _avg?: voznjaAvgOrderByAggregateInput
    _max?: voznjaMaxOrderByAggregateInput
    _min?: voznjaMinOrderByAggregateInput
    _sum?: voznjaSumOrderByAggregateInput
  }

  export type voznjaScalarWhereWithAggregatesInput = {
    AND?: voznjaScalarWhereWithAggregatesInput | voznjaScalarWhereWithAggregatesInput[]
    OR?: voznjaScalarWhereWithAggregatesInput[]
    NOT?: voznjaScalarWhereWithAggregatesInput | voznjaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"voznja"> | number
    usrId?: IntWithAggregatesFilter<"voznja"> | number
    pocetna_destinacija?: StringWithAggregatesFilter<"voznja"> | string
    krajnja_destinacija?: StringWithAggregatesFilter<"voznja"> | string
    mesto_polaska?: StringWithAggregatesFilter<"voznja"> | string
    Broj_mesta?: IntWithAggregatesFilter<"voznja"> | number
    Datum_i_vreme_polaska?: DateTimeWithAggregatesFilter<"voznja"> | Date | string
    Cena?: FloatWithAggregatesFilter<"voznja"> | number
  }

  export type putnikCreateInput = {
    Email: string
    Password: string
    ime: string
    prezime: string
    broj_telefona: string
    prebivaliste: string
  }

  export type putnikUncheckedCreateInput = {
    id?: number
    Email: string
    Password: string
    ime: string
    prezime: string
    broj_telefona: string
    prebivaliste: string
  }

  export type putnikUpdateInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    ime?: StringFieldUpdateOperationsInput | string
    prezime?: StringFieldUpdateOperationsInput | string
    broj_telefona?: StringFieldUpdateOperationsInput | string
    prebivaliste?: StringFieldUpdateOperationsInput | string
  }

  export type putnikUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    ime?: StringFieldUpdateOperationsInput | string
    prezime?: StringFieldUpdateOperationsInput | string
    broj_telefona?: StringFieldUpdateOperationsInput | string
    prebivaliste?: StringFieldUpdateOperationsInput | string
  }

  export type putnikCreateManyInput = {
    id?: number
    Email: string
    Password: string
    ime: string
    prezime: string
    broj_telefona: string
    prebivaliste: string
  }

  export type putnikUpdateManyMutationInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    ime?: StringFieldUpdateOperationsInput | string
    prezime?: StringFieldUpdateOperationsInput | string
    broj_telefona?: StringFieldUpdateOperationsInput | string
    prebivaliste?: StringFieldUpdateOperationsInput | string
  }

  export type putnikUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    ime?: StringFieldUpdateOperationsInput | string
    prezime?: StringFieldUpdateOperationsInput | string
    broj_telefona?: StringFieldUpdateOperationsInput | string
    prebivaliste?: StringFieldUpdateOperationsInput | string
  }

  export type usrCreateInput = {
    Email: string
    Password: string
    username: string
    admin_check?: boolean
    voznje?: voznjaCreateNestedManyWithoutVozacInput
  }

  export type usrUncheckedCreateInput = {
    id?: number
    Email: string
    Password: string
    username: string
    admin_check?: boolean
    voznje?: voznjaUncheckedCreateNestedManyWithoutVozacInput
  }

  export type usrUpdateInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admin_check?: BoolFieldUpdateOperationsInput | boolean
    voznje?: voznjaUpdateManyWithoutVozacNestedInput
  }

  export type usrUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admin_check?: BoolFieldUpdateOperationsInput | boolean
    voznje?: voznjaUncheckedUpdateManyWithoutVozacNestedInput
  }

  export type usrCreateManyInput = {
    id?: number
    Email: string
    Password: string
    username: string
    admin_check?: boolean
  }

  export type usrUpdateManyMutationInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admin_check?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usrUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admin_check?: BoolFieldUpdateOperationsInput | boolean
  }

  export type voznjaCreateInput = {
    pocetna_destinacija: string
    krajnja_destinacija: string
    mesto_polaska: string
    Broj_mesta: number
    Datum_i_vreme_polaska: Date | string
    Cena: number
    vozac: usrCreateNestedOneWithoutVoznjeInput
  }

  export type voznjaUncheckedCreateInput = {
    id?: number
    usrId: number
    pocetna_destinacija: string
    krajnja_destinacija: string
    mesto_polaska: string
    Broj_mesta: number
    Datum_i_vreme_polaska: Date | string
    Cena: number
  }

  export type voznjaUpdateInput = {
    pocetna_destinacija?: StringFieldUpdateOperationsInput | string
    krajnja_destinacija?: StringFieldUpdateOperationsInput | string
    mesto_polaska?: StringFieldUpdateOperationsInput | string
    Broj_mesta?: IntFieldUpdateOperationsInput | number
    Datum_i_vreme_polaska?: DateTimeFieldUpdateOperationsInput | Date | string
    Cena?: FloatFieldUpdateOperationsInput | number
    vozac?: usrUpdateOneRequiredWithoutVoznjeNestedInput
  }

  export type voznjaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usrId?: IntFieldUpdateOperationsInput | number
    pocetna_destinacija?: StringFieldUpdateOperationsInput | string
    krajnja_destinacija?: StringFieldUpdateOperationsInput | string
    mesto_polaska?: StringFieldUpdateOperationsInput | string
    Broj_mesta?: IntFieldUpdateOperationsInput | number
    Datum_i_vreme_polaska?: DateTimeFieldUpdateOperationsInput | Date | string
    Cena?: FloatFieldUpdateOperationsInput | number
  }

  export type voznjaCreateManyInput = {
    id?: number
    usrId: number
    pocetna_destinacija: string
    krajnja_destinacija: string
    mesto_polaska: string
    Broj_mesta: number
    Datum_i_vreme_polaska: Date | string
    Cena: number
  }

  export type voznjaUpdateManyMutationInput = {
    pocetna_destinacija?: StringFieldUpdateOperationsInput | string
    krajnja_destinacija?: StringFieldUpdateOperationsInput | string
    mesto_polaska?: StringFieldUpdateOperationsInput | string
    Broj_mesta?: IntFieldUpdateOperationsInput | number
    Datum_i_vreme_polaska?: DateTimeFieldUpdateOperationsInput | Date | string
    Cena?: FloatFieldUpdateOperationsInput | number
  }

  export type voznjaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usrId?: IntFieldUpdateOperationsInput | number
    pocetna_destinacija?: StringFieldUpdateOperationsInput | string
    krajnja_destinacija?: StringFieldUpdateOperationsInput | string
    mesto_polaska?: StringFieldUpdateOperationsInput | string
    Broj_mesta?: IntFieldUpdateOperationsInput | number
    Datum_i_vreme_polaska?: DateTimeFieldUpdateOperationsInput | Date | string
    Cena?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type putnikCountOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    ime?: SortOrder
    prezime?: SortOrder
    broj_telefona?: SortOrder
    prebivaliste?: SortOrder
  }

  export type putnikAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type putnikMaxOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    ime?: SortOrder
    prezime?: SortOrder
    broj_telefona?: SortOrder
    prebivaliste?: SortOrder
  }

  export type putnikMinOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    ime?: SortOrder
    prezime?: SortOrder
    broj_telefona?: SortOrder
    prebivaliste?: SortOrder
  }

  export type putnikSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type VoznjaListRelationFilter = {
    every?: voznjaWhereInput
    some?: voznjaWhereInput
    none?: voznjaWhereInput
  }

  export type voznjaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usrCountOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    username?: SortOrder
    admin_check?: SortOrder
  }

  export type usrAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usrMaxOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    username?: SortOrder
    admin_check?: SortOrder
  }

  export type usrMinOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    username?: SortOrder
    admin_check?: SortOrder
  }

  export type usrSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UsrRelationFilter = {
    is?: usrWhereInput
    isNot?: usrWhereInput
  }

  export type voznjaCountOrderByAggregateInput = {
    id?: SortOrder
    usrId?: SortOrder
    pocetna_destinacija?: SortOrder
    krajnja_destinacija?: SortOrder
    mesto_polaska?: SortOrder
    Broj_mesta?: SortOrder
    Datum_i_vreme_polaska?: SortOrder
    Cena?: SortOrder
  }

  export type voznjaAvgOrderByAggregateInput = {
    id?: SortOrder
    usrId?: SortOrder
    Broj_mesta?: SortOrder
    Cena?: SortOrder
  }

  export type voznjaMaxOrderByAggregateInput = {
    id?: SortOrder
    usrId?: SortOrder
    pocetna_destinacija?: SortOrder
    krajnja_destinacija?: SortOrder
    mesto_polaska?: SortOrder
    Broj_mesta?: SortOrder
    Datum_i_vreme_polaska?: SortOrder
    Cena?: SortOrder
  }

  export type voznjaMinOrderByAggregateInput = {
    id?: SortOrder
    usrId?: SortOrder
    pocetna_destinacija?: SortOrder
    krajnja_destinacija?: SortOrder
    mesto_polaska?: SortOrder
    Broj_mesta?: SortOrder
    Datum_i_vreme_polaska?: SortOrder
    Cena?: SortOrder
  }

  export type voznjaSumOrderByAggregateInput = {
    id?: SortOrder
    usrId?: SortOrder
    Broj_mesta?: SortOrder
    Cena?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type voznjaCreateNestedManyWithoutVozacInput = {
    create?: XOR<voznjaCreateWithoutVozacInput, voznjaUncheckedCreateWithoutVozacInput> | voznjaCreateWithoutVozacInput[] | voznjaUncheckedCreateWithoutVozacInput[]
    connectOrCreate?: voznjaCreateOrConnectWithoutVozacInput | voznjaCreateOrConnectWithoutVozacInput[]
    createMany?: voznjaCreateManyVozacInputEnvelope
    connect?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
  }

  export type voznjaUncheckedCreateNestedManyWithoutVozacInput = {
    create?: XOR<voznjaCreateWithoutVozacInput, voznjaUncheckedCreateWithoutVozacInput> | voznjaCreateWithoutVozacInput[] | voznjaUncheckedCreateWithoutVozacInput[]
    connectOrCreate?: voznjaCreateOrConnectWithoutVozacInput | voznjaCreateOrConnectWithoutVozacInput[]
    createMany?: voznjaCreateManyVozacInputEnvelope
    connect?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type voznjaUpdateManyWithoutVozacNestedInput = {
    create?: XOR<voznjaCreateWithoutVozacInput, voznjaUncheckedCreateWithoutVozacInput> | voznjaCreateWithoutVozacInput[] | voznjaUncheckedCreateWithoutVozacInput[]
    connectOrCreate?: voznjaCreateOrConnectWithoutVozacInput | voznjaCreateOrConnectWithoutVozacInput[]
    upsert?: voznjaUpsertWithWhereUniqueWithoutVozacInput | voznjaUpsertWithWhereUniqueWithoutVozacInput[]
    createMany?: voznjaCreateManyVozacInputEnvelope
    set?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    disconnect?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    delete?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    connect?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    update?: voznjaUpdateWithWhereUniqueWithoutVozacInput | voznjaUpdateWithWhereUniqueWithoutVozacInput[]
    updateMany?: voznjaUpdateManyWithWhereWithoutVozacInput | voznjaUpdateManyWithWhereWithoutVozacInput[]
    deleteMany?: voznjaScalarWhereInput | voznjaScalarWhereInput[]
  }

  export type voznjaUncheckedUpdateManyWithoutVozacNestedInput = {
    create?: XOR<voznjaCreateWithoutVozacInput, voznjaUncheckedCreateWithoutVozacInput> | voznjaCreateWithoutVozacInput[] | voznjaUncheckedCreateWithoutVozacInput[]
    connectOrCreate?: voznjaCreateOrConnectWithoutVozacInput | voznjaCreateOrConnectWithoutVozacInput[]
    upsert?: voznjaUpsertWithWhereUniqueWithoutVozacInput | voznjaUpsertWithWhereUniqueWithoutVozacInput[]
    createMany?: voznjaCreateManyVozacInputEnvelope
    set?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    disconnect?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    delete?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    connect?: voznjaWhereUniqueInput | voznjaWhereUniqueInput[]
    update?: voznjaUpdateWithWhereUniqueWithoutVozacInput | voznjaUpdateWithWhereUniqueWithoutVozacInput[]
    updateMany?: voznjaUpdateManyWithWhereWithoutVozacInput | voznjaUpdateManyWithWhereWithoutVozacInput[]
    deleteMany?: voznjaScalarWhereInput | voznjaScalarWhereInput[]
  }

  export type usrCreateNestedOneWithoutVoznjeInput = {
    create?: XOR<usrCreateWithoutVoznjeInput, usrUncheckedCreateWithoutVoznjeInput>
    connectOrCreate?: usrCreateOrConnectWithoutVoznjeInput
    connect?: usrWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usrUpdateOneRequiredWithoutVoznjeNestedInput = {
    create?: XOR<usrCreateWithoutVoznjeInput, usrUncheckedCreateWithoutVoznjeInput>
    connectOrCreate?: usrCreateOrConnectWithoutVoznjeInput
    upsert?: usrUpsertWithoutVoznjeInput
    connect?: usrWhereUniqueInput
    update?: XOR<XOR<usrUpdateToOneWithWhereWithoutVoznjeInput, usrUpdateWithoutVoznjeInput>, usrUncheckedUpdateWithoutVoznjeInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type voznjaCreateWithoutVozacInput = {
    pocetna_destinacija: string
    krajnja_destinacija: string
    mesto_polaska: string
    Broj_mesta: number
    Datum_i_vreme_polaska: Date | string
    Cena: number
  }

  export type voznjaUncheckedCreateWithoutVozacInput = {
    id?: number
    pocetna_destinacija: string
    krajnja_destinacija: string
    mesto_polaska: string
    Broj_mesta: number
    Datum_i_vreme_polaska: Date | string
    Cena: number
  }

  export type voznjaCreateOrConnectWithoutVozacInput = {
    where: voznjaWhereUniqueInput
    create: XOR<voznjaCreateWithoutVozacInput, voznjaUncheckedCreateWithoutVozacInput>
  }

  export type voznjaCreateManyVozacInputEnvelope = {
    data: voznjaCreateManyVozacInput | voznjaCreateManyVozacInput[]
  }

  export type voznjaUpsertWithWhereUniqueWithoutVozacInput = {
    where: voznjaWhereUniqueInput
    update: XOR<voznjaUpdateWithoutVozacInput, voznjaUncheckedUpdateWithoutVozacInput>
    create: XOR<voznjaCreateWithoutVozacInput, voznjaUncheckedCreateWithoutVozacInput>
  }

  export type voznjaUpdateWithWhereUniqueWithoutVozacInput = {
    where: voznjaWhereUniqueInput
    data: XOR<voznjaUpdateWithoutVozacInput, voznjaUncheckedUpdateWithoutVozacInput>
  }

  export type voznjaUpdateManyWithWhereWithoutVozacInput = {
    where: voznjaScalarWhereInput
    data: XOR<voznjaUpdateManyMutationInput, voznjaUncheckedUpdateManyWithoutVozacInput>
  }

  export type voznjaScalarWhereInput = {
    AND?: voznjaScalarWhereInput | voznjaScalarWhereInput[]
    OR?: voznjaScalarWhereInput[]
    NOT?: voznjaScalarWhereInput | voznjaScalarWhereInput[]
    id?: IntFilter<"voznja"> | number
    usrId?: IntFilter<"voznja"> | number
    pocetna_destinacija?: StringFilter<"voznja"> | string
    krajnja_destinacija?: StringFilter<"voznja"> | string
    mesto_polaska?: StringFilter<"voznja"> | string
    Broj_mesta?: IntFilter<"voznja"> | number
    Datum_i_vreme_polaska?: DateTimeFilter<"voznja"> | Date | string
    Cena?: FloatFilter<"voznja"> | number
  }

  export type usrCreateWithoutVoznjeInput = {
    Email: string
    Password: string
    username: string
    admin_check?: boolean
  }

  export type usrUncheckedCreateWithoutVoznjeInput = {
    id?: number
    Email: string
    Password: string
    username: string
    admin_check?: boolean
  }

  export type usrCreateOrConnectWithoutVoznjeInput = {
    where: usrWhereUniqueInput
    create: XOR<usrCreateWithoutVoznjeInput, usrUncheckedCreateWithoutVoznjeInput>
  }

  export type usrUpsertWithoutVoznjeInput = {
    update: XOR<usrUpdateWithoutVoznjeInput, usrUncheckedUpdateWithoutVoznjeInput>
    create: XOR<usrCreateWithoutVoznjeInput, usrUncheckedCreateWithoutVoznjeInput>
    where?: usrWhereInput
  }

  export type usrUpdateToOneWithWhereWithoutVoznjeInput = {
    where?: usrWhereInput
    data: XOR<usrUpdateWithoutVoznjeInput, usrUncheckedUpdateWithoutVoznjeInput>
  }

  export type usrUpdateWithoutVoznjeInput = {
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admin_check?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usrUncheckedUpdateWithoutVoznjeInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admin_check?: BoolFieldUpdateOperationsInput | boolean
  }

  export type voznjaCreateManyVozacInput = {
    id?: number
    pocetna_destinacija: string
    krajnja_destinacija: string
    mesto_polaska: string
    Broj_mesta: number
    Datum_i_vreme_polaska: Date | string
    Cena: number
  }

  export type voznjaUpdateWithoutVozacInput = {
    pocetna_destinacija?: StringFieldUpdateOperationsInput | string
    krajnja_destinacija?: StringFieldUpdateOperationsInput | string
    mesto_polaska?: StringFieldUpdateOperationsInput | string
    Broj_mesta?: IntFieldUpdateOperationsInput | number
    Datum_i_vreme_polaska?: DateTimeFieldUpdateOperationsInput | Date | string
    Cena?: FloatFieldUpdateOperationsInput | number
  }

  export type voznjaUncheckedUpdateWithoutVozacInput = {
    id?: IntFieldUpdateOperationsInput | number
    pocetna_destinacija?: StringFieldUpdateOperationsInput | string
    krajnja_destinacija?: StringFieldUpdateOperationsInput | string
    mesto_polaska?: StringFieldUpdateOperationsInput | string
    Broj_mesta?: IntFieldUpdateOperationsInput | number
    Datum_i_vreme_polaska?: DateTimeFieldUpdateOperationsInput | Date | string
    Cena?: FloatFieldUpdateOperationsInput | number
  }

  export type voznjaUncheckedUpdateManyWithoutVozacInput = {
    id?: IntFieldUpdateOperationsInput | number
    pocetna_destinacija?: StringFieldUpdateOperationsInput | string
    krajnja_destinacija?: StringFieldUpdateOperationsInput | string
    mesto_polaska?: StringFieldUpdateOperationsInput | string
    Broj_mesta?: IntFieldUpdateOperationsInput | number
    Datum_i_vreme_polaska?: DateTimeFieldUpdateOperationsInput | Date | string
    Cena?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsrCountOutputTypeDefaultArgs instead
     */
    export type UsrCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsrCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use putnikDefaultArgs instead
     */
    export type putnikArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = putnikDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usrDefaultArgs instead
     */
    export type usrArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usrDefaultArgs<ExtArgs>
    /**
     * @deprecated Use voznjaDefaultArgs instead
     */
    export type voznjaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = voznjaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}